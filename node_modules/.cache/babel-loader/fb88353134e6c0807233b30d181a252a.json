{"ast":null,"code":"var _jsxFileName = \"/Users/muthusankar/Desktop/alamo-tools-main/client/src/components/Tool/index.js\";\nimport React from \"react\";\nimport { Card, Button } from 'react-bootstrap';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nfunction Tool(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity,\n    description\n  } = item;\n  const [state, dispatch] = useStoreContext();\n  const {\n    cart\n  } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find(cartItem => cartItem._id === _id); // if there was a match, call UPDATE with a new purchase quantity\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item,\n          purchaseQuantity: 1\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    style: {\n      width: '18rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card.Img, {\n    variant: \"top\",\n    src: `/images/${image}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    class: \"category-names\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, name), /*#__PURE__*/React.createElement(Card.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, description, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 35\n    }\n  }), \" Price: \", price, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 57\n    }\n  }), \" Quantity: \", quantity), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: addToCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, \"Add to Cart\")));\n}\n\n;\nexport default Tool;","map":{"version":3,"sources":["/Users/muthusankar/Desktop/alamo-tools-main/client/src/components/Tool/index.js"],"names":["React","Card","Button","useStoreContext","ADD_TO_CART","UPDATE_CART_QUANTITY","Tool","item","image","name","_id","price","quantity","description","state","dispatch","cart","addToCart","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,qBAAlD;;AAIA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AAChB,QAAM;AACFC,IAAAA,KADE;AAEFC,IAAAA,IAFE;AAGFC,IAAAA,GAHE;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,QALE;AAMFC,IAAAA;AANE,MAOFN,IAPJ;AASA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBZ,eAAe,EAAzC;AAEA,QAAM;AAAEa,IAAAA;AAAF,MAAWF,KAAjB;;AAEA,QAAMG,SAAS,GAAG,MAAM;AACpB;AACA,UAAMC,UAAU,GAAGF,IAAI,CAACG,IAAL,CAAWC,QAAD,IAAcA,QAAQ,CAACV,GAAT,KAAiBA,GAAzC,CAAnB,CAFoB,CAIpB;;AACA,QAAIQ,UAAJ,EAAgB;AACdH,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEhB,oBADC;AAEPK,QAAAA,GAAG,EAAEA,GAFE;AAGPY,QAAAA,gBAAgB,EAAEC,QAAQ,CAACL,UAAU,CAACI,gBAAZ,CAAR,GAAwC;AAHnD,OAAD,CAAR;AAKD,KAND,MAMO;AACLP,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEjB,WADC;AAEPoB,QAAAA,OAAO,EAAE,EAAE,GAAGjB,IAAL;AAAWe,UAAAA,gBAAgB,EAAE;AAA7B;AAFF,OAAD,CAAR;AAID;AACF,GAjBH;;AAqBA,sBACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,GAAN;AAAU,IAAA,OAAO,EAAC,KAAlB;AAAwB,IAAA,GAAG,EAAG,WAAUjB,KAAM,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,KAAK,EAAC,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCC,IAApC,CADJ,eAEI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKI,WADL,oBACkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADlB,cACiCF,KADjC,oBACwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADxC,iBAC0DC,QAD1D,CAFJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,OAAO,EAAEK,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALJ,CAFJ,CADJ;AAYH;;AAAA;AAED,eAAeX,IAAf","sourcesContent":["import React from \"react\";\nimport { Card, Button } from 'react-bootstrap';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\n\n\nfunction Tool(item) {\n    const {\n        image,\n        name,\n        _id,\n        price,\n        quantity,\n        description\n    } = item;\n\n    const [state, dispatch] = useStoreContext();\n\n    const { cart } = state\n\n    const addToCart = () => {\n        // find the cart item with the matching id\n        const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n      \n        // if there was a match, call UPDATE with a new purchase quantity\n        if (itemInCart) {\n          dispatch({\n            type: UPDATE_CART_QUANTITY,\n            _id: _id,\n            purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n          });\n        } else {\n          dispatch({\n            type: ADD_TO_CART,\n            product: { ...item, purchaseQuantity: 1 }\n          });\n        }\n      };\n\n\n\n    return (\n        <Card style={{ width: '18rem' }}>\n            <Card.Img variant=\"top\" src={`/images/${image}`} />\n            <Card.Body>\n                <Card.Title class='category-names'>{name}</Card.Title>\n                <Card.Text>\n                    {description} <br /> Price: {price} <br /> Quantity: {quantity}\n                </Card.Text>\n                <Button variant=\"primary\" onClick={addToCart}>Add to Cart</Button>\n            </Card.Body>\n        </Card>\n    )\n};\n\nexport default Tool;"]},"metadata":{},"sourceType":"module"}